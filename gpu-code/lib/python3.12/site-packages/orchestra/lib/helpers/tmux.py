"""Tmux helper functions for Orchestra."""

import os
import subprocess
from typing import List, Optional

# Constants
TMUX_SOCKET = "orchestra"
PANE_AGENT = "2"


def tmux_env() -> dict:
    """Get environment variables for tmux commands."""
    env = os.environ.copy()
    return env


def build_tmux_cmd(*args) -> List[str]:
    """Build a tmux command with the orchestra socket."""
    return ["tmux", "-L", TMUX_SOCKET] + list(args)


def run_local_tmux_command(*args) -> subprocess.CompletedProcess:
    """Run a tmux command locally and return the result."""
    cmd = build_tmux_cmd(*args)
    return subprocess.run(
        cmd,
        capture_output=True,
        text=True,
    )


def execute_local(cmd: List[str]) -> subprocess.CompletedProcess:
    """Execute a local command."""
    return subprocess.run(
        cmd,
        env=tmux_env(),
        capture_output=True,
        text=True,
    )


def build_new_session_cmd(session_id: str, work_dir: str, command: str) -> List[str]:
    """Build command to create a new tmux session."""
    return build_tmux_cmd(
        "new-session",
        "-d",
        "-s",
        session_id,
        "-c",
        work_dir,
        command,
    )


def build_respawn_pane_cmd(pane: str, command: List[str]) -> List[str]:
    """Build command to respawn a pane with a new command."""
    target = f"orchestra-main:main.{pane}"
    return build_tmux_cmd(
        "respawn-pane",
        "-k",
        "-t",
        target,
    ) + command


def respawn_pane(pane: str, command: List[str]) -> subprocess.CompletedProcess:
    """Respawn a pane with a new command."""
    cmd = build_respawn_pane_cmd(pane, command)
    return subprocess.run(
        cmd,
        env=tmux_env(),
        capture_output=True,
        text=True,
    )


def respawn_pane_with_vim(pane: str, file_path: str) -> subprocess.CompletedProcess:
    """Respawn a pane with vim editing a file."""
    return respawn_pane(pane, ["vim", file_path])


def respawn_pane_with_terminal(pane: str, cwd: Optional[str] = None) -> subprocess.CompletedProcess:
    """Respawn a pane with a terminal shell."""
    if cwd:
        command = ["sh", "-c", f"cd {cwd} && exec $SHELL"]
    else:
        command = ["$SHELL"]
    return respawn_pane(pane, command)
