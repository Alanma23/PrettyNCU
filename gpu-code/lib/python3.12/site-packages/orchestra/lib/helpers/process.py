"""Process management helper functions for Orchestra."""

import shutil
import signal
import subprocess
import time
from typing import Optional

from orchestra.lib.logger import get_logger

logger = get_logger(__name__)


def check_dependencies() -> dict:
    """Check for required dependencies."""
    deps = {}

    # Check for tmux
    deps["tmux"] = shutil.which("tmux") is not None

    # Check for claude
    deps["claude"] = shutil.which("claude") is not None

    # Check for docker
    deps["docker"] = shutil.which("docker") is not None

    # Check for git
    deps["git"] = shutil.which("git") is not None

    return deps


def kill_process_gracefully(proc: subprocess.Popen, timeout: float = 5.0) -> bool:
    """Kill a process gracefully, with escalating signals."""
    try:
        if proc.poll() is not None:
            # Process already terminated
            return True

        # Try SIGTERM first
        logger.debug(f"Sending SIGTERM to process {proc.pid}")
        proc.terminate()

        # Wait for process to terminate
        try:
            proc.wait(timeout=timeout)
            logger.debug(f"Process {proc.pid} terminated gracefully")
            return True
        except subprocess.TimeoutExpired:
            # Process didn't terminate, try SIGKILL
            logger.warning(f"Process {proc.pid} didn't terminate, sending SIGKILL")
            proc.kill()
            proc.wait(timeout=2.0)
            logger.debug(f"Process {proc.pid} killed")
            return True

    except Exception as e:
        logger.error(f"Error killing process {proc.pid}: {e}")
        return False
